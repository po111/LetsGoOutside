// <auto-generated />
using System;
using LetsGoOutside.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LetsGoOutside.Infrastructure.Migrations
{
    [DbContext(typeof(LetsGoOutsideDbContext))]
    partial class LetsGoOutsideDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Article Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Author identifier");

                    b.Property<string>("BriefIntroduction")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Article brief introduction");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(7000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Article content");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation");

                    b.Property<string>("HyperlinkSource")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Article source hyperlink");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Article image url");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasComment("ApprovedByAdmin");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Article title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles", (string)null);

                    b.HasComment("Article by author");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            BriefIntroduction = "Наближава Еньов ден, казват, че тогава билките придобиват вълшебна сила. Еньовските китки и венци се правят преди изгрев, наричанията и желанията се сбъдват.",
                            Content = "Смята се, че на този ден енергията на Слънцето е най-мощна и по магичен начин се предава на водата и на лековитите треви. Затова основните ритуали тогава са посрещане на изгрева, къпане в росата или близката река, бране на билки и плетене на венци и китки. Еньовден е стар български народен празник, с който се отбелязва лятното слънцестоене. Смята се, че в нощта срещу 24 юни билките имат най-голяма сила. Затова сутринта на Еньовден се берат билки, които ще бъдат използвани през цялата година. Те трябва да са \"77 и половина\", колкото са и болестите по човека. От набраните билки, между които на първо място е еньовчето, жените правят еньовски китки и венци, вързани с червен конец. Ето и някои лечебни билки, които можем да съберем на Еньовден: \r\nЛайка\r\nЦветовете на лайката са изключително полезни и пълни с витамини, минерали и флавоноиди. Чаят се препоръчва при детоксикация, за пречистване на кръвта и намаляване на холесторола, както и за подобряване на стомашно-чревния тракт. Лайката има изключително успокояващо действие и е идеална за подобряване на съня.\r\nБял равнец \r\nНаричат го „бяло еньовче“, като билката има 7 разновидности и всички те са лековити. Чаят от бял равнец помага за регулиране на менструацията и хормоните при менопауза. Има кръвосъсирващ и болкоуспокояващ ефект и помага при гастрит, язва, ревматични болки и простуда. Равнецът регулира обмяната на веществата, стимулира работата на бъбреците и успокоява подуването на стомаха. \r\nЖълт кантарион \r\nБлагодарение на фитохимикала хиперицин, жълтият кантарион е често използван за успокояване на нервите, както и при леки депресивни състояния. Билката помага при гастрит, проблеми със стомаха, сърцебиене, главоболие и раздразнителност.\r\nЕньовче \r\nЖълтото растение е символ на Еньовден. Билката изчиства тялото от токсини, премахва камъни в бъбреците и помага при проблеми с простата и пикочните пътища. Компресите, направени с настойка от еньовче помагат при кожни възпаления – ожулвания, язви и изгаряния.\r\nМащерка \r\nАнтиоксидантните флавоноиди, терпинен и бета каротин в мащерката предпазват от инфекции и понижават възпаленията в тялото. Билката успокоява дихателните пътища и подобрява устната хигиена. Мащерката помага за намаляване на вредните бактерии, които са в основата на образуването на гъбичките.\r\nЛипа \r\nСъдържа голяма количество витамини, антиоксиданти, флавоноиди, клей, танини и етерични масла, които облекчават състоянието ни при грип и настинка и успокояват нервната система. Липата стимулира храносмилането, бори се с инфекциите на пикочните пътища и намалява риска от хипертония и сърдечно-съдови заболявания.",
                            DateCreated = new DateTime(2024, 4, 2, 20, 0, 27, 310, DateTimeKind.Local).AddTicks(6808),
                            HyperlinkSource = "https://dariknews.bg/novini/liubopitno/lechebnite-bilki-se-berat-na-eniovden-video-2274136",
                            ImageUrl = "https://www.tialoto.bg/media/files/resized/article/615x348/5fd/aabca29c4bab382f78d77180ab1635fd-sunset-5314285-1920.jpg",
                            IsApproved = false,
                            Title = " Идея за разходка: Какви билки да си наберем на Еньов ден"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            BriefIntroduction = "В София има невероятни кътчета, където лесно можем да забравим за забързаното ежедневие. Освен парковете, градините на София са сред любимите места на жителите на града и истински дар от природата. Те ни дават онзи свеж, нежен полъх, който ражда у нас прекрасни емоции и незабравими моменти.",
                            Content = "В София има невероятни кътчета, където лесно можем да забравим за забързаното ежедневие. Освен парковете,градините на София са сред любимите места на жителите на града и истински дар от природата. Те ни дават онзи свеж, нежен полъх, който ражда у нас прекрасни емоции и незабравими моменти.\r\nЕто ги 10-те ни любими градини в центъра на София.\r\nГрадинката на \"Кристал\"\r\nНамира се в непосредствена близост до Народното събрание, Храм \"Св. Александър Невски\", Централен военен клуб, както и до Театър Българска Армия. Градинката носи името на вече несъществуващия ресторант \"Кристал\". След като ресторантът спира да работи, градинката става сборен пункт за редица художници и антиквари.\r\nПаркът е едно от най-харизматичните места за младите хора на София. В него е разположен паметникът на Стефан Стамболов. Тук често се провеждат изложби на открито и културни събития, поради тази причина градинката е и паметник на парковото изкуство. Заради зеленото пространство и алеите си, „Кристал“ е отлично място за отдих. \r\nГрадска градина \r\nГрадската градина е най-старият парк в град София, разположен в центъра на града пред бившия царски дворец в близост до Народният театър, Народната банка, Общината и министерства. Първоначално се е наричал Александровска градина. На територията му има музикална детска площадка, фитнес уреди, ново осветление, добре поддържани градинки и за това парка никога не спи и не затваря очи. Тук се намира и популярният фонтан с бронзовата балерина пред Народния театър. Градината се слави с добрите си шахматисти и организиране на различни събития и изложения. Любимо място за столичани и гостите на града е ледената пързалка. Градината е идеална  за приятна разходка, сладки приказки или спокойствие в средата на натоварен ден.\r\n Градина „Руската църква“\r\nГрадинката се намира непосредствено до Руската църква в гр. София, на ъгъла на бул. \"Цар Освободител\" и ул. \"Г.С. Раковски\". В парка се намира Руската църква „Св. Николай”, която е една от най-забележителните сгради в София. Построена е в периода 1907 – 1914 г. по проект на руския архитект М. Преображенски по инициатива на руското посолство и върху негов парцел. Това става повод паркът да бъде посещаван от много туристи, също така е и задължителна спирка при опознаването на софийските забележителности. В градината се намира и друга забележителност - паметникът на Пушкин.\r\nКняжеска градина\r\nГрадината е с перфектна локация в центъра на града между кръстовището на Софийския университет \"Св. Климент Охридски\", булевард \"Цар Освободител\", Орлов мост, бул. \"Евлоги и Христо Георгиеви\", бул. \"Васил Левски\" и бул. \"Васил Левски\". В нея е разположен паметникът на Съветската армия от 2009г. Княжеска градина е известна с най-разнообразни заведения за хранене, красиви алеи, детски кътове и площадки за игри, фитнес на открито с 18 комбинирани ергономични уреда, които могат да се ползват от деца и възрастни едновременно и др. В парка е изградена и първата площадка за игра и свободно разхождане на домашни любимци в София. Предпочитано място за изложения и концерти.\r\nЦарската градина \r\nЦарската градина се намира зад Националната художествена галерия, която преди е била царски дворец. Царската градина е направена още по време на изграждането на двореца. Паркът около двореца е бил разположен на 18 декара площ и към него имало няколко входа. Днес е запазена малка част от градината. В последните години паркът е изключителен хит за столичани. Красотата на градината става причина за множество сватбени фотосесии. \r\nДокторската градина \r\nВ сърцето на София намира място и прекрасната Докторска градина. Разположена е между улиците \"Оборище\" и \"Шипка\", точно на гърба на Националната библиотека \"Св. св. Кирил и Методий\" и в близост до голяма част от историческите паметници на столицата и държавните институции. Името на парка произлиза от паметника, който се намира в него - Докторски паметник. Паметникът е изграден в памет на загиналите медицински работници в Руско-турската освободителна война от 1877-1878г. В Докторската градина се намират най- различни видове дървета – тришипна гледичия, внесени от Северна Америка, блатен кипарис, гинко, дъб, софора, платан и бяла акация. Също така има оставена и историческа бяла акация, която представлява символичен паметник, посветен на Даниел Неф, който е създател на първите столични паркове и градини.\r\nГрадинките при Националния дворец на културата (НДК)\r\nПаркът се намира на парковия площад „България“ в централната част на София, където е разположена и внушителната основна сграда на Националния дворец на културата. Мястото представлява голям комплекс за конференции, търговски изложения, фестивали и културни събития с известни изпълнители. Паркът се разделя на две части - градината пред НДК и градината зад НДК. Градинката пред НДК се намира точно пред Националния дворец на културата в град София, между ул. \"Фритьоф Нансен\" и бул. \"Патриарх Евтимий\". До нея е разположен Войнишкия мемориал на Първи и Шести софийски полк. В градинката има многофункционална сцена, детски кът и много зелени площи.\r\nГрадина „Библиотека св. св. Кирил и Методий“\r\nВеликолепна градина разположена точно пред Национална библиотека „Св. св. Кирил и Методий“ заобиколена с много зеленина и прелестни, пъстри цветя. Националната библиотека „Св. св. Кирил и Методий“ в София е най-старият културен институт на следосвобожденска България и най-голямата обществена библиотека в страната.  Това става повод тук да се провеждат множество културни събития. В цветната градина пред библиотеката се намира един от най-впечатляващите монументи в столицата - паметникът на св. св. Кирил и Методий. До днес паметникът е считан за едно от най-добрите постижения на българското монументално изкуство. Всяка година в София на 24-ти май пред паметника на солунските братя се отбелязва националният празник на българската писменост и култура. \r\nГрадина \"Възраждане\"\r\nИзвестна със своите големи стогодишни чинари, градината не остава празна в горещите летни дни. Всеки търси спокойните пейки под чудните чинари, за да открие малко прохлада през лятото. Създадена през далечната 1937г. до днес тя е предпочитано място за отдих. Градината е сравнително малка, но компенсира със свежест и красота.\r\nГрадина \"Св. Климент Охридски\"\r\nТова е една от най-емблематичните градини в София, разположена в сърцето на столицата в пространството между Народнo събрание и Софийски университет. Софийският университет „Св. Климент Охридски“ е най-старото и най-голямо висше училище в България. Сградата му е една от забележителностите тук в столицата. Превъзходната архитектура на сградата привлича множество туристи, които пълнят и градинките в околността. Други от най-честите посетители на парка са студентите от университета, които след натоварен ден намират спокойствие и почивка сред зеленината и цветята тук. В градинката също така е издигнат паметник на Св. Климент Охридски един от учениците на Св. Св. Кирил и Методий, смятан за създател на кирилицата. Градинката е подходяща и за приятни разходки по дългите и алеи.",
                            DateCreated = new DateTime(2024, 4, 12, 20, 0, 27, 310, DateTimeKind.Local).AddTicks(6813),
                            HyperlinkSource = "https://galardo.bg/news/10-favorite-gardens-in-the-center-of-sofia",
                            ImageUrl = "https://galardo.bg/uploads/images/N/79/10-favorite-gardens-in-the-center-of-sofia/viber_image_2022-08-03_14-16-18-032.jpg",
                            IsApproved = false,
                            Title = "10 любими градини в центъра на София"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            BriefIntroduction = "Българските обичаи са носители на национална идентичност, а корените им търсим в далечното минало, здраво преплетени с историята и християнската религия. През годините наследените традиции се пазят и обогатяват, като доказателството за това днес е богатият културен календар, който включва десетки международни и национални фестивали и събори.",
                            Content = "Българските обичаи са носители на национална идентичност, а корените им търсим в далечното минало, здраво преплетени с историята и християнската религия. През годините наследените традиции се пазят и обогатяват, като доказателството за това днес е богатият културен календар, който включва десетки международни и национални фестивали и събори. \r\nА къде, освен на традиционен събор, можеш да усетиш тръпката и атмосферата на традиционната култура и да се насладиш на истински празник. Опиянен от песни, свирни, танци и подплатен от достатъчно количество домашни вино и ракия (не е задължително), осезаемо усещаш и се насищаш с автентичен български фолклор.\r\n1. Национален събор на българското народно творчество “Копривщица”  \r\nСъборът води началото си от 1965 година и популяризира българския народен фолклор, като събира на едно място певчески и танцови ансамбли от цялата страна. Фестивалът се провежда през пет години в местността Войводенец, в събора участват още свирачи, разказвачи на народни предания, групи за народни обичаи и др. \r\n2. Национален фолклорен събор “Рожен”\r\n Съборът се провежда през август на всеки четири години, има над стогодишна традиция, а първият събор е организиран през 1898 г. Именно тук през 1961 г. Валя Балканска изпява космическата “Излел е Дельо хайдутин”. Днес символ на събора е самобитният гайдарски оркестър “Сто каба гайди”. Съборът продължава два дни. Открива се с химна на Родопите “Бела съм, бела, юначе” под съпровода на “Стоте гайди”. Кулминацията на надпяването е галаспектакълът “Звезден Рожен” във вечерта на първия ден.\r\n3. Международен фестивал на маскарадните игри “Сурва” – Перник Събитието e най-авторитетната в България и на Балканите изява на традиционни народни игри и обичаи с маски. От 2008 г. Международният фестивал на маскарадните игри се провежда ежегодно. Най-зрелищният и атрактивен елемент е двудневното състезателно дефиле на маскарадни групи от страната и чужбина. Традиционно във фестивалната надпревара участват около 5 000 души в над 90 маскарадни групи от всички етнографски райони на България и гости от Европа, Азия и Африка.\r\n4. Традиционен събор “Пирин пее” Организира се от 1962 г. и благодарение на него, през годините популярност придобиват уникалните мъжки песни от Банско, женските песни “на високо” от село Долен и Сатовча, традициите на зурната и тъпана и т.н. Концертите на фолклорните изпълнители и състави  се провеждат на всяка четна година в живописната разложка местност “Предела”. Според организаторите съборът “Пирин пее” не е фестивал, а движение за издирване, съхранение и популяризиране на изворни народни песни и традиции. На събитието се показват и могат да се видят образци на народната песен, танц, обреди, занаяти, народен инструментариум, удивителните костюми и накити, везмо и шевици, религиозно-езическите вярвания и ритуали, цялата календарно-обредна система. Организатор на Събора на народното творчество “Пирин пее” е Община Разлог и Областна администрация – Благоевград.\r\n5. Международно гайдарско надсвирване село Гела\r\nПървото гайдарско надсвирване стартира през 2002 г. на Илинденските поляни в смолянското село Гела. Целта на фестивала е да популяризира автентичния родопски фолклор. Надсвирването се провежда в три възрастови групи, като задължително условие за българските участници е изпълненията да са на каба гайда. Постепенно събитието добива достатъчно голяма популярност и прераства в международен форум. Регистрирани са чуждестранни изпълнители от Япония, Нидерлания, Унгария, Франция, Великобритания и Шотландия. Броят на участниците варира от 40 до 60 изпълнители на година. Най-малкият гайдар, участвал в надсвирването, е на 5 години, а най-възрастният – на 85 години.\r\n6. Международен фолклорен фестивал Бургас                 Фестивалът е снован през 1965 г., провежда се всяка година през август и е с международен статут. Организира се от Община Бургас под патронажа на кмета на града и под надслов “Да съхраним завещаното от нашите предци и го предадем на своите деца”. Обикновено събитието няма конкурсен характер и включва концерти на сцената на Летен театър Бургас, на открити естради (сцени), концерти в региона, празнични дефилета, научна сесия по проблемите на фолклора, изложба-базар на традиционни сувенири, демонстрация на народни занаяти.\r\n7. Национален събор “Петрова нива\" \r\nНа Петрова нива, в землището на с. Стоилово, през 1903 г. се е провело събранието, на което е решено да се вдигне въстание за присъединяване на Странджа, Одринска и Беломорска Тракия към България. Община Малко Търново е организатор на традиционния събор посветен на Илинденско-Преображенското въстание, където “Странджа пее” и почита паметта на хората, които са дали живота си, за да се обединят.\r\n8. Фестивалът на фолклорната носия Жеравна\r\nФондация “Българе” съвместно с община Котел, кметство село Жеравна, “Сдружение за Жеравна” и “Бона фиде” обединиха усилията си и организират уникален фестивал, който може да се сравни само с машина на времето. По традиция събитието се провежда в седмицата след Голямa Богородица, в парк Добромерица край Жеравна и събира хиляди хора от всички краища на България, за да се веселят, пеят, свирят и танцуват. По време на фестивала може да видите български танци представени от професионални ансамбли, дошли от всички етнографски области на България. Единственото условие за желаещите да присъстват е задължително да са облечени с фолклорна носия (автентична, сценична или стилизирана). А за тези, които не разполагат с такава, на входа на фестивала се продават и отдават носии под наем. \r\n9. Фолклорен събор “Златна гъдулка” – Русе\r\n Съборът e един от най-старите у нас форуми за традиционна култура и се организира от Община Русе. Провежда се в покрайнините на Русе, в местността около хижа “Приста” на естествена амфитеатрална тераса и представя традиционното наследство на Русенския край, а в последно време и на цялата фолклорна област Средна Северна и Североизточна България. Фестивалът е с конкурсен характер и се провежда в два раздела: обработен фолклор (танцови състави, вокални групи, оркестри) и изворен фолклор (обичаи, свързани с годишния календар и семейството, певчески и инструментални групи, танцьори, певци, свирачи, разказвачи).\r\n10. Международен фолклорен фестивал на инструменталните и танцови групи – Раднево\r\nПровежда се през септември в градския парк на Раднево. Първото издание на фестивала датира от 1998 г. под името Международен фестивал на инструменталните групи. През годините на своето съществуване, той се оформя като фестивал на инструменталното и танцово изкуство. На неговата сцена са гостували инструментални групи и танцови ансамбли от Русия, Украйна, Турция, Полша, Швеция, Франция, Сърбия, Германия, Унгария, Грузия, Румъния, Гърция, Македония и др.",
                            DateCreated = new DateTime(2024, 4, 7, 20, 0, 27, 310, DateTimeKind.Local).AddTicks(6818),
                            HyperlinkSource = "https://www.10te.bg/obshtestvo/10-ot-nai-populyarnite-festivali-i-sabori-na-narodnoto-tvorchestvo-v-balgariya/",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fkimreikifoundation.com%2Fwp-content%2Fuploads%2F2015%2F07%2F11666204_867722719987867_6989792785009645148_n.jpg&f=1&nofb=1&ipt=babbeb30657ec1a4195d2386d903cea8275dad83e3d7ef151da20105a66d83d9&ipo=images",
                            IsApproved = false,
                            Title = "10 от най-популярните фолклорни фестивали и събори у нас"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            BriefIntroduction = "Представяме ви места из цяла България с маси и пейки и изградени огнища, където е разрешено паленето на огън.",
                            Content = "Представяме ви места из цяла България с маси и пейки и изградени огнища, където е разрешено паленето на огън. \r\n1.Село Алдормировци, област София, Екопътека Войнишка памет \r\nТова е една много закътана екопътека. В началото ѝ, край малък паркинг с рекичка има беседка, барбекю, детска площадка, чешма. По самата пътека имаше още няколко дървени маси с пейки, както и беседка при Пирамидата в местността „Центъра“. До началото на екопътеката се стига с кола, но пътят е тесен, а местата за паркиране са малко. \r\n2.Град Айтос, парк Славеева река \r\nИма изграден район с дървени маси и пейки, няколко зидани огнища. В парка, но не при местата за пикник, има детски площадки, зоологическа градина, тенис маси, волейболни игрища и още много забавления. С кола се стига до началото на парка. \r\n3.Град Бургас, парк минерални бани Ветрен\r\nПодходящ за много компании, с деца или без. Паркира се удобно и близо. Има добро количество дървени маси и пейки, огнищата са над 20. В непосредствена близост има детска площадка, волейболни игрища, маси за тенис, занаятчийска бирария.\r\n4. Село Врабча, Врабчански водопад\r\nДолу при водопада има шест-седем дървени маси с пейки и няколко обособени огнища. Приятно ромоли рекичката на водопада.Има химическа тоалетна. Паркира се горе на пътя и се върви десетина минути, за да се слезе в котловината.\r\n5. Град Дупница, парк Рила \r\nИма иззидани навеси с огнища, дървени маси и пейки. Ползването им се заплаща (през 2016 година – 6 лева). В парка, но не край местата за угощения има детски зони, плувен комплекс, езеро. С кола се стига до началото на парка.\r\n6. Град Луковит, Екопътека Геопарк Искър-Панега\r\nМестата за пикник са по цялата дължина на пътеката: беседки, дървени маси с пейки, огнища, заслони със зидани огнища и маси. Паркира се в началото на екопътеката. Имайте предвид, че последните зони с огнища са на над три километра от паркинга. Обаче там е толкова спокойно и хубаво, че си заслужава.\r\n7. град Трън, Трънско ждрело \r\nКрай река Ерма има двайсетина дървени маси и пейки, десетина огнища за свободно ползване, детска площадка, тоалетна. Паркингът е на метри от мястото. Сянката за съжаление е покрай реката, а огнищата са на слънце.\r\n8. Село Чавдар, област София\r\nМалко е слънчево там. Срещу ресторанта има навес с дървени маси с пейки и едно барбекю. Не се заплаща за масите, за огнището нямаше информация. Има беседка с маса до църквата света Петка. В района имаше чешма. Паркингът е непосредствено до атракциона.\r\n9. Град София, заслон Паша бунар край Драгалевския манастир\r\nНа километър и половина от Драгалевския манастир, стига се по сравнително равна пътека. Има заслон край реката, огнище, както и маси с пейки. Много красиво място.",
                            DateCreated = new DateTime(2024, 2, 17, 20, 0, 27, 310, DateTimeKind.Local).AddTicks(6822),
                            HyperlinkSource = "https://pylnoshtastie.com/%D0%BD%D0%B0%D0%BA%D1%8A%D0%B4%D0%B5-%D1%81-%D0%B4%D0%B5%D1%82%D0%B5-%D0%BC%D0%B5%D1%81%D1%82%D0%B0-%D1%81-%D0%BE%D0%B3%D0%BD%D0%B8%D1%89%D0%B0-%D0%B8-%D0%BC%D0%B0%D1%81%D0%B8-%D0%B7%D0%B0-%D0%BF/",
                            ImageUrl = "https://pylnoshtastie.com/wp-content/uploads/2020/10/park-rila-dupnica022.jpg",
                            IsApproved = false,
                            Title = "Места с огнища и маси за пикник в България"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 1,
                            BriefIntroduction = "Ако харесвате фотогеничните места и обичате да се прибирате от екскурзиите си с куп интересни снимки, следващите дестинации имат място в следващите ви маршрути. Някои са изпълнени с цвят целогодишно, а други - само в определен сезон или месец.",
                            Content = "Пътуването е радост - за очите, за душата, за всички сетива. Понякога ви привличат историите на дадено място, друг път - гледките, на които сте попаднали някъде из интернет и се чудите възможно ли е да са толкова невероятни и на живо. Ако харесвате фотогеничните места и обичате да се прибирате от екскурзиите си с куп интересни снимки, следващите дестинации имат място в следващите ви маршрути. Някои са изпълнени с цвят целогодишно, а други - само в определен сезон или месец. Вижте седем от най-цветните дестинации в България. \r\nПещера Венеца\r\nПещера Венеца придоби невероятна популярност, след като в нея беше инсталирано художествено осветление и тя беше официално отворена за посетители през 2015 г. Разноцветните светлини подчертават впечатляващо ледените кристали, сталактитите, сталагмитите и другите интересни образувания в нея. Пещерата се намира на 3 км от Белоградчик край село Орешец. Работи през цялата година всеки ден без понеделник.\r\nЦентърът на Ловеч\r\nПоредицата от исторически къщи от двете страни на Покрития мост на Колю Фичето в Ловеч се отразяват във водите на река Осъм със своите жълти, червени, лилави и зелени фасади. На заден фон се издигат възвишенията на Дунавската хълмиста равнина и предпланинските части на Стара планина. Ако дойдете тук през ранната пролет, те допълват палитрата със свежо зелено, а през есента са абстрактно изкуство в зелено, жълто, червено и оранжево. Продължете разходката си по моста към старинния квартал Вароша до Ловешката крепост и паметника на Васил Левски за спираща дъха панорама към целия град и околните възвишения.\r\nКопривщица\r\nВ историческата част на Копривщица къщите са не само пълни с история, но и греят в най-различни цветове, кой от кой по-ярък под лъчите на средногорското слънце. Сградите в наситена охра, тъмносиньо и тъмночервено се издигат достолепно една до друга от двете страни на криволичещите калдъръмени улици.\r\nКато добавите към това белите кантове по ръбовете на прозорците и потъмнялото от времето дърво по фасадите им, се получава гледка, достойна за илюстрация на книга с приказки. \r\nПолетата с лавандула в началото на лятото\r\nНаред с полетата с рози, през последните години България стана популярна и с романтичните си лавандулови насаждения. Един балкански Прованс, който обаче не е съсредоточен на едно място, а е пръснат в различни краища на страната - край Шумен, Пловдив, Казанлък. Докато някои от собствениците на лавандулови насаждения не са ентусиазирани от тълпите туристи и фотографи, които се стичат в полетата в сезона на цъфтежа на цветето от края на юни до края на юли, други дори поставят специални декори, за да направят снимките на посетителите още по-интересни (например лавандуловото поле край пътя между Калояново и Дуванлии, Пловдивско).\r\nКрушунските водопади\r\nКрасивите травертинови каскади на Крушунските водопади от години са магнит за търсачите на красиви гледки. Цветът на водата се променя през различните сезони и когато отидете, може да е зеленикава, наситеносиня, млечнобяла или пък съвсем прозрачна. В комбинация с белите ръбове на терасите и зеленината, в която са потънали водопадите, гледката на моменти е нереална.\r\nЕсен в Странджа\r\nВ която и българска планина да отидете, есента е сезонът на пъстрите черги, които горите плетат по склоновете от средата на септември до началото на октомври. Голяма част от листата окапват след първия по-силен вятър или дъжд, но краткият сезон прави преживяването още по-ценно.\r\nРилският манастир\r\nРилският манастир е най-големият в България, най-посещаваният и единственият, който е включен в световното културно наследство на ЮНЕСКО. Всеки има своята лична причина да види манастира, но цветните му стенописи създават специална атмосфера. Най-старите стенописи са в църквата на Хрельовата кула и разказват в три сцени част от живота на Иван Рилски. Автори на изображенията са най-именитите за времето си майстори - Захари Зограф, Димитър Зограф, Коста Вельов, Станислав Доспевски, Димитър Молеров, Симеон Молеров и други.",
                            DateCreated = new DateTime(2024, 3, 23, 20, 0, 27, 310, DateTimeKind.Local).AddTicks(6827),
                            HyperlinkSource = "https://trip.dir.bg/patevoditel/7-ot-nay-tsvetnite-mesta-v-balgariya-snimki",
                            ImageUrl = "https://static.dir.bg/uploads/images/2022/06/08/2369234/1366x768.jpg?_=1654684511",
                            IsApproved = false,
                            Title = "Посети 7 от най-цветните места на България"
                        });
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.ArticleCategory", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArticlesCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            CategoryId = 5
                        },
                        new
                        {
                            ArticleId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            ArticleId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            ArticleId = 1,
                            CategoryId = 4
                        },
                        new
                        {
                            ArticleId = 2,
                            CategoryId = 5
                        },
                        new
                        {
                            ArticleId = 2,
                            CategoryId = 6
                        },
                        new
                        {
                            ArticleId = 3,
                            CategoryId = 5
                        },
                        new
                        {
                            ArticleId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ArticleId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            ArticleId = 4,
                            CategoryId = 5
                        },
                        new
                        {
                            ArticleId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ArticleId = 4,
                            CategoryId = 6
                        },
                        new
                        {
                            ArticleId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            ArticleId = 5,
                            CategoryId = 5
                        },
                        new
                        {
                            ArticleId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ArticleId = 5,
                            CategoryId = 6
                        },
                        new
                        {
                            ArticleId = 5,
                            CategoryId = 4
                        });
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.ArticleWeather", b =>
                {
                    b.Property<int>("WeatherId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.HasKey("WeatherId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticlesWeathers", (string)null);

                    b.HasData(
                        new
                        {
                            WeatherId = 3,
                            ArticleId = 1
                        },
                        new
                        {
                            WeatherId = 9,
                            ArticleId = 1
                        },
                        new
                        {
                            WeatherId = 2,
                            ArticleId = 1
                        },
                        new
                        {
                            WeatherId = 5,
                            ArticleId = 1
                        },
                        new
                        {
                            WeatherId = 4,
                            ArticleId = 1
                        },
                        new
                        {
                            WeatherId = 3,
                            ArticleId = 2
                        },
                        new
                        {
                            WeatherId = 9,
                            ArticleId = 2
                        },
                        new
                        {
                            WeatherId = 2,
                            ArticleId = 2
                        },
                        new
                        {
                            WeatherId = 5,
                            ArticleId = 2
                        },
                        new
                        {
                            WeatherId = 4,
                            ArticleId = 2
                        },
                        new
                        {
                            WeatherId = 1,
                            ArticleId = 2
                        },
                        new
                        {
                            WeatherId = 10,
                            ArticleId = 2
                        },
                        new
                        {
                            WeatherId = 8,
                            ArticleId = 2
                        },
                        new
                        {
                            WeatherId = 6,
                            ArticleId = 2
                        },
                        new
                        {
                            WeatherId = 3,
                            ArticleId = 3
                        },
                        new
                        {
                            WeatherId = 9,
                            ArticleId = 3
                        },
                        new
                        {
                            WeatherId = 2,
                            ArticleId = 3
                        },
                        new
                        {
                            WeatherId = 4,
                            ArticleId = 3
                        },
                        new
                        {
                            WeatherId = 3,
                            ArticleId = 4
                        },
                        new
                        {
                            WeatherId = 9,
                            ArticleId = 4
                        },
                        new
                        {
                            WeatherId = 2,
                            ArticleId = 4
                        },
                        new
                        {
                            WeatherId = 5,
                            ArticleId = 4
                        },
                        new
                        {
                            WeatherId = 4,
                            ArticleId = 4
                        },
                        new
                        {
                            WeatherId = 1,
                            ArticleId = 4
                        },
                        new
                        {
                            WeatherId = 10,
                            ArticleId = 4
                        },
                        new
                        {
                            WeatherId = 6,
                            ArticleId = 4
                        },
                        new
                        {
                            WeatherId = 3,
                            ArticleId = 5
                        },
                        new
                        {
                            WeatherId = 9,
                            ArticleId = 5
                        },
                        new
                        {
                            WeatherId = 2,
                            ArticleId = 5
                        },
                        new
                        {
                            WeatherId = 5,
                            ArticleId = 5
                        },
                        new
                        {
                            WeatherId = 4,
                            ArticleId = 5
                        },
                        new
                        {
                            WeatherId = 1,
                            ArticleId = 5
                        },
                        new
                        {
                            WeatherId = 10,
                            ArticleId = 5
                        },
                        new
                        {
                            WeatherId = 6,
                            ArticleId = 5
                        },
                        new
                        {
                            WeatherId = 8,
                            ArticleId = 5
                        },
                        new
                        {
                            WeatherId = 7,
                            ArticleId = 5
                        });
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Author identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Author Name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Authors", (string)null);

                    b.HasComment("Author of content");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 2, 12, 20, 0, 26, 913, DateTimeKind.Local).AddTicks(9706),
                            Name = "Евтим Добринов",
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 3, 23, 20, 0, 26, 913, DateTimeKind.Local).AddTicks(9739),
                            Name = "Лилия Друмева",
                            UserId = "27d63979-ce0b-4250-8473-5ba2251f407e"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 1, 12, 20, 0, 26, 913, DateTimeKind.Local).AddTicks(9750),
                            Name = "Администратор-автор",
                            UserId = "c974417d-38b4-42a6-9133-708d1d7c8b0f"
                        });
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Article category name");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasComment("Article category");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Activity"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Fun"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kids"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Relax"
                        });
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Event Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Event address");

                    b.Property<string>("BriefIntroduction")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Event brief introduction");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation of event");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasComment("Event description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End date of event");

                    b.Property<string>("EventHyperlink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Event hyperlink");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Event image url");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasComment("ApprovedByAdmin");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int")
                        .HasComment("Organizer identifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Start date of event");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Event title");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events", (string)null);

                    b.HasComment("Organizer's Event");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Тръгване: от София, Централна гара",
                            BriefIntroduction = "Живописен планински преход из малко познатия западен дял на Балкана ",
                            DateCreated = new DateTime(2024, 3, 13, 20, 0, 27, 629, DateTimeKind.Local).AddTicks(9350),
                            Description = "През град Своге се отправяме към внушителния Искърски пролом и рида Препасница на Понор планина. \r\nС Вазовата еко пътека и приказната каскада на водопада Бовска Скакля, започва разходката ни, из този малко познат дял на Балкана. \r\nСлед кратка почивка в село Заселе продължаваме нагоре, към огледния връх Була. \r\nПродължаваме към първенеца на рида - Връх Сърбеница, сред лабиринт от куполообразни върхове, „препасани“ с внушителни скални откоси от варовик и бездънните кратери на огромните понори между тях. \r\nОт скалистия връх се открива невероятна панорама към Комовете , Козница, Врачанския Балкан, Голяма и Мала планина, Искърското дефиле, Витоша и Софийско равно поле със София. \r\nОт тук, подсичайки връх Крета, се отправяме към горния ръб на внушителния скален венец (препасница) , природния феномен Стола или Черния камък. \r\nС леко изкачване, подсичаме връх Лупова глава и през премката с връх Препасница поемаме надолу, към сгушената под отвесите на скалния венец, махала Топилата на село Добравица, където ни чака микробуса.",
                            EndDate = new DateTime(2024, 4, 27, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            EventHyperlink = "https://poplaninigori.com/index.php/excursions/98-vodopad-skakla-vr-h-bula-s-rbenica-i-skalen-fenomen-stola",
                            ImageUrl = "https://poplaninigori.com/components/com_rseventspro/assets/images/events/thumbs/660/00a2c885491f0637c1e5d6b92ff8a709.jpg",
                            IsApproved = false,
                            OrganizerId = 3,
                            StartDate = new DateTime(2024, 4, 27, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Водопад Скакля, Връх Була, Сърбеница и Скален Феномен Стола"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Конна база Войнеговци, преди с.Войнеговци",
                            BriefIntroduction = "Заповядайте на Тодоровден при нас - програма с почетна обиколка, игри и работилница за децата, яздене на коне и стреляне с лък",
                            DateCreated = new DateTime(2024, 2, 22, 20, 0, 27, 629, DateTimeKind.Local).AddTicks(9417),
                            Description = "Какво да очаквате на Тодоровден - 23.03.2024 (събота)?\r\nПразникът ни ще е ориентиран към традициите и децата.\r\nОрганизацията се прави не само от нас, но и от участниците ездачи, които са любители на конете, наши клиенти и приятели. Искаме и ние да се забавляваме, така че не очаквайте да сме напълно стриктни в часовете или в самото провеждане на обичаите. Празникът е \"от приятели за приятели\".\r\nПланираме около 10:00/10:30 часа групата ездачи да тръгне на почетната обиколка на село Войнеговци и да е обратно в конната база около 11:30/12:00 часа.\r\nОт 10:00 часа до завръщането на конете, в конната база ще има игри за деца, работилничка за подкови от картон, рисуване и оцветяване.\r\n11:30/12:00 Обичай по захранване на конете и даряване на ездачите. Наричане за здраве.\r\n12:30 - 14:30 Качване на децата за обиколка на манежа с кон, безплатно и еднократно за всяко дете.\r\nНа територията на конната база ще имате възможност за хапване. Свободни сте да си носите и собствена консумация.  Още - стрелба с лък за децата (платена активност) и за закупуване на сувенири и детски книги за коне и животни, с което да подкрепите нашата дейност и особено отглеждането на животните в нашия зоокът. \r\nЩе се радваме да споделите празника с нас, да дойдете заредени с добро настроение и усмивки и да сте с нагласата, че празникът е за всички и трябва да усетим магията му!",
                            EndDate = new DateTime(2024, 3, 23, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EventHyperlink = "https://www.facebook.com/BulgarianHorseFriends/posts/877014877770622?ref=embed_post",
                            ImageUrl = "https://scontent.fsof5-1.fna.fbcdn.net/v/t39.30808-6/431521395_878842197587890_2485102450651271760_n.jpg?stp=dst-jpg_p843x403&_nc_cat=106&ccb=1-7&_nc_sid=5f2048&_nc_ohc=n8tzYR7oMGUAX-RrIRK&_nc_ht=scontent.fsof5-1.fna&oh=00_AfB3gYuBuofT8C3uLju9oZtHCVwXODqIwcDjwi3ek6S2wQ&oe=660ADF17",
                            IsApproved = false,
                            OrganizerId = 2,
                            StartDate = new DateTime(2024, 3, 23, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Тодоровден в конна база Войнеговци"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Парк Борисова градина",
                            BriefIntroduction = "Приключенски парк Коколандия е място с екстремно-развлекателен характер, изграден в гориста местност. Съоръженията са подходящи за деца над 6 години.",
                            DateCreated = new DateTime(2024, 3, 23, 20, 0, 27, 629, DateTimeKind.Local).AddTicks(9432),
                            Description = "При нас няма задължителни изисквания, няма такса „зала“, такса „човек“ и др. Вие избирате колко човека да бъдете, дали да си донесете почерпка или да използвате услугите на външен специализиран кетъринг. Можем да ви осигурим аниматор и тематично парти или вие сами да се забавлявате с децата. Решението е изцяло ваше.\r\nЕдинствено очакваме да използвате нашите съоръжения.",
                            EndDate = new DateTime(2024, 12, 12, 20, 0, 27, 629, DateTimeKind.Local).AddTicks(9440),
                            EventHyperlink = "https://kokolandia.com/",
                            ImageUrl = "https://kokolandia.com/wp-content/uploads/2023/04/DMK_2688-scaled.jpg",
                            IsApproved = false,
                            OrganizerId = 4,
                            StartDate = new DateTime(2024, 3, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Организирайте рождения ден на своето дете при нас, в Коколандия"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Област Варна, с.Неофит Рилски",
                            BriefIntroduction = "Средновековен събор \"Ново начало\" е събитие, пресъздаващо материалната и духовна култура на старобългарската (езическа и православна) цивилизация, и държавните традиции на Първото българско царство на Балканите.",
                            DateCreated = new DateTime(2024, 4, 2, 20, 0, 27, 629, DateTimeKind.Local).AddTicks(9445),
                            Description = "Средновековен събор \"Ново начало\" е събитие, пресъздаващо материалната и духовна култура на старобългарската (езическа и православна) цивилизация, и държавните традиции на Първото българско царство на Балканите.\r\nСъборът се провежда всяка година (месец юни), на територията на Исторически парк – своеобразен \"Музей на живата история\", изграден в с. Неофит Рилски, област Варна, България.\r\nОрганизатори на събора са Исторически парк АД и Българска школа за старинни войнски изкуства \"Величие\".\r\nПрез първия съборен ден, гостите на Исторически парк от близо и далеч, ще се пренесат изцяло в света на средновековните войни, ще станат свидетели на войнската \"Тризна\" – конни и пеши надборвания с оръжие, посветени на бойната слава на предците и ще настръхнат при сблъсъка на мъже и бойни дружини в Старобългарските войнски игри \"Ристание\" . Вторият ден на събора \"Ново начало\", ще продължи с пресъздаването на бита, културата и военното дело на народите от Евразия, в периода на ранното средновековие и Старобългарските войнски игри \"Ристание\".",
                            EndDate = new DateTime(2024, 6, 23, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EventHyperlink = "https://ipark.bg/bg-BG/Events/Details/1126",
                            ImageUrl = "https://ipark.bg/uploads/83169efb-72a6-45a9-ade5-5705dd064a7d.jpg",
                            IsApproved = false,
                            OrganizerId = 3,
                            StartDate = new DateTime(2024, 6, 22, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Средновековен събор \"НОВО НАЧАЛО\""
                        },
                        new
                        {
                            Id = 5,
                            Address = "Област Варна, с.Неофит Рилски",
                            BriefIntroduction = "С идеята да съхраним и популяризираме кулинарното наследство и да представим традиционните храни на различни етнически и етнографски групи, Исторически парк става за поредна година домакин и организатор на Международния фестивал на традиционната храна.",
                            DateCreated = new DateTime(2024, 4, 12, 20, 0, 27, 629, DateTimeKind.Local).AddTicks(9459),
                            Description = "С идеята да съхраним и популяризираме кулинарното наследство и да представим традиционните храни на различни етнически и етнографски групи, Исторически парк става за поредна година домакин и организатор на Международния фестивал на традиционната храна. \r\nВ последните дни от месец август, на 24-и и 25-и, на обширните пространства на Фестивална зона ще си дадем среща с добрата и чиста храна, ще се запознаем с пазители на кулинарните традиции, ще се докоснем до забравени вкусове, ще научим много за кулинарната култура по нашите земи. \r\n Обединявайки традиции, поминък, занаяти и творчество, фестивалът на традиционната храна в Исторически парк ще спомогне да се пренесат знания от миналото към настоящето и бъдещето. \r\n Изчезващи продукти и такива, които не познаваме, ще бъдат преоткрити. Сетивата ще бъдат предизвикани със забравени вкусове. \r\nТук, сред обширните пространства на Фестивална зона, сред прекрасната природа,  ще имате възможност да посетите кулинарни работилници и множество представяния на традиционни ястия от България и съседните балкански страни. \r\n За поредна година сръчни майстори готвачи, известни сомелиери и производители на биохрани ще демонстрират своите умения за приготвяне на традиционни гозби и производство на храна, която да поддържа здравето и духа ни. \r\nИзобилието от вкусове от различни близки и далечни краища ще бъде чудесен повод да поемете на път към Исторически парк, за да останете с незабравими впечатления. \r\nОсвен с кулинарни изкушения, миналото ще се съживи чрез демонстрации от реконструкторския екип  към Исторически парк, музикални и танцови представления от местни състави и много други изненади.  \r\nЗаемете първи ред във вашето пътуване в миналото, като посетите фестивала на храните в Исторически парк.",
                            EndDate = new DateTime(2024, 8, 25, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EventHyperlink = "https://ipark.bg/bg-BG/Events/Details/2137",
                            ImageUrl = "https://ipark.bg/uploads/9167b071-827e-4743-916d-64c39bde1e66.jpg",
                            IsApproved = false,
                            OrganizerId = 2,
                            StartDate = new DateTime(2024, 8, 24, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "МЕЖДУНАРОДЕН ФЕСТИВАЛ НА ТРАДИЦИОННИТЕ ХРАНИ"
                        });
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Organizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Organizer identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BriefPresentation")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Organizer brief presentation");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("Organizer date of creation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Organizer Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Organizer's phone");

                    b.Property<string>("UrlWebsite")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Organizer website");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Organizers", (string)null);

                    b.HasComment("Organizer of events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BriefPresentation = "Забавления за деца и възрастни. Конна езда, зоокът, стрелба с лък, детски лагери.",
                            DateCreated = new DateTime(2024, 1, 12, 20, 0, 26, 777, DateTimeKind.Local).AddTicks(6158),
                            Name = "Конна База Войнеговци",
                            PhoneNumber = "+359878394090",
                            UrlWebsite = "https://www.facebook.com/BulgarianHorseFriends",
                            UserId = "d8c87a2b-70f7-4799-86c7-75e882c47894"
                        },
                        new
                        {
                            Id = 2,
                            BriefPresentation = "Исторически парк е туристически атракцион за културен туризъм в близост до град Варна, който предлага приключения до 10 000 години назад във времето за цялото семейство.",
                            DateCreated = new DateTime(2024, 2, 12, 20, 0, 26, 777, DateTimeKind.Local).AddTicks(6165),
                            Name = "Исторически парк",
                            PhoneNumber = "+359896840615",
                            UrlWebsite = "https://ipark.bg",
                            UserId = "c38970b5-010c-494b-9621-fe38e520e367"
                        },
                        new
                        {
                            Id = 3,
                            BriefPresentation = "Какво ще откриете тук? Планински преходи и пешеходни екскурзии за всички - пешеходни разходки в планината, по-тежички планински преходи, както и нови върхове и приключения за най-подготвените планинари.",
                            DateCreated = new DateTime(2024, 1, 28, 20, 0, 26, 777, DateTimeKind.Local).AddTicks(6171),
                            Name = "По планини и гори",
                            PhoneNumber = "+359889215722",
                            UrlWebsite = "https://poplaninigori.com",
                            UserId = "6528f9a3-a6c1-4fdc-b095-d1f074e33843"
                        },
                        new
                        {
                            Id = 4,
                            BriefPresentation = "Приключенски парк Коколандия е място с екстремно-развлекателен характер. :Въжените кръгове са подходящи за деца над 6 години. За по-малките сме приготвили други зававления съобразно възрастта им. Разполагаме с въжени съоръжения, въжеландия, трийтоп и други.",
                            DateCreated = new DateTime(2024, 1, 5, 20, 0, 26, 777, DateTimeKind.Local).AddTicks(6178),
                            Name = "Коколандия",
                            PhoneNumber = "+359899966970",
                            UrlWebsite = "https://kokolandia.com",
                            UserId = "3354c365-9a55-4a7b-a766-4ea59d7cc57c"
                        },
                        new
                        {
                            Id = 7,
                            BriefPresentation = "",
                            DateCreated = new DateTime(2023, 1, 12, 20, 0, 26, 777, DateTimeKind.Local).AddTicks(6184),
                            Name = "Администратор-организатор",
                            PhoneNumber = "+359777777777",
                            UrlWebsite = "",
                            UserId = "c974417d-38b4-42a6-9133-708d1d7c8b0f"
                        });
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Weather Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Weather name");

                    b.HasKey("Id");

                    b.ToTable("Weathers", (string)null);

                    b.HasComment("Appropriate weather");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Winter"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Summer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Spring"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Autumn"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Wet"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hot"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sunny"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Snowy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cold"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Windy"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36e4cae2-747d-498d-909a-aee20def5225",
                            Email = "author1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "author1@mail.com",
                            NormalizedUserName = "author1@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEP49N8OuwrpFXA33eK8Ml+pfXMsKckHRGam+SI5M9loUoxBaEzCb7Vnc/96AseaQGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c9d9ca3-1963-4a96-b2b0-dcd37e29c167",
                            TwoFactorEnabled = false,
                            UserName = "author1@mail.com"
                        },
                        new
                        {
                            Id = "27d63979-ce0b-4250-8473-5ba2251f407e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d3092a6-e078-4138-9a4b-0acac0414b26",
                            Email = "author2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "author2@mail.com",
                            NormalizedUserName = "author2@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBw9Nthhnd/JZn93vF/I024xpTw9j7N5EdSXx4WqjlQ3j3TJcNqDiD1fie6XconPiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66e7b301-b0e4-4431-b396-367ac5b6d875",
                            TwoFactorEnabled = false,
                            UserName = "author2@mail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b9465b9-72aa-47a4-a85c-a494cc93435e",
                            Email = "guest1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest1@mail.com",
                            NormalizedUserName = "guest1@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEGEzcFForGE/Ee0dg45rCXpRTSdpl6vUYrWIGZ9Zndqwuge2tIAsnzUY/Ezj6GKjQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6407ab1-1ff6-4057-b026-6ae9f9471994",
                            TwoFactorEnabled = false,
                            UserName = "guest1@mail.com"
                        },
                        new
                        {
                            Id = "29ebd1a1-6a97-4e4f-bc98-4e8bf1e5825f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b79aabb-e315-4d25-bff9-9c06dfbba376",
                            Email = "guest2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest2@mail.com",
                            NormalizedUserName = "guest2@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFl463ivh9fwPZJn1oiC7B/2zjMd5dhkwguWH34FfcNbyAGXELpzqWqoAMHxJOcj1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6effd7ec-0ab0-4ce2-91e8-620e45d3eb42",
                            TwoFactorEnabled = false,
                            UserName = "guest2@mail.com"
                        },
                        new
                        {
                            Id = "d8c87a2b-70f7-4799-86c7-75e882c47894",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf343993-2a63-479a-ab3d-de7929d64102",
                            Email = "organizer1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "organizer1@mail.com",
                            NormalizedUserName = "organizer1@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEN1ewgaaGnv+HR53wG31DkwwKl5mRH/PtkUAEjjFc5fbUcEmJSeID+/mPRPt51eUgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1233689-b9ff-41c3-abd7-629172a3fbb3",
                            TwoFactorEnabled = false,
                            UserName = "organizer1@mail.com"
                        },
                        new
                        {
                            Id = "c38970b5-010c-494b-9621-fe38e520e367",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "838854cd-2c2b-4df2-819a-125ebc5339dc",
                            Email = "organizer2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "organizer2@mail.com",
                            NormalizedUserName = "organizer2@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYubjE8JcBT9k/9qiSEtsQycPZ9XS0x/6J0zjQb+JPsBbf73j3RNknj78Dj9wHa2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ad4de9a-c07d-4626-9b32-e5eaf19cffe7",
                            TwoFactorEnabled = false,
                            UserName = "organizer2@mail.com"
                        },
                        new
                        {
                            Id = "6528f9a3-a6c1-4fdc-b095-d1f074e33843",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0591bcec-c1e4-4f5a-bf52-50662cfb686a",
                            Email = "organizer3@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "organizer3@mail.com",
                            NormalizedUserName = "organizer3@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEF6Ny7pPbcpL54UZyM+wb9a6OU273O5m0sTkbJ1bhLhjHBhHDP0xRErK1BWFMsjaPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ed354f2-b3fe-4d2e-83e7-fee6e145ff5c",
                            TwoFactorEnabled = false,
                            UserName = "organizer3@mail.com"
                        },
                        new
                        {
                            Id = "3354c365-9a55-4a7b-a766-4ea59d7cc57c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eab9a118-4b99-404b-bd7c-f2efa7cf0566",
                            Email = "organizer4@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "organizer4@mail.com",
                            NormalizedUserName = "organizer4@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENM2GSUFcAl7vbbVzuI2njQB5MVX9N5W+hLOlFWxnUphpkSdSXgojG8ukOQFV6sKAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6701dc6-d086-4677-bb78-6c6896f7b222",
                            TwoFactorEnabled = false,
                            UserName = "organizer4@mail.com"
                        },
                        new
                        {
                            Id = "c974417d-38b4-42a6-9133-708d1d7c8b0f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "631c2dfc-a098-4078-bf7c-f5f940e8ab68",
                            Email = "admin1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin1@mail.com",
                            NormalizedUserName = "admin1@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEGhvzAZMdi0/t+ktRCXlZl5cGk4JKngxaU0oHN2dxZrL1VXR7vzdNcKpb+12GymAlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87014065-1077-4b85-9842-0fde38fdeb90",
                            TwoFactorEnabled = false,
                            UserName = "admin1@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Article", b =>
                {
                    b.HasOne("LetsGoOutside.Infrastructure.Data.Models.Author", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.ArticleCategory", b =>
                {
                    b.HasOne("LetsGoOutside.Infrastructure.Data.Models.Article", "Article")
                        .WithMany("ArticlesCategories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsGoOutside.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("ArticlesCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.ArticleWeather", b =>
                {
                    b.HasOne("LetsGoOutside.Infrastructure.Data.Models.Article", "Article")
                        .WithMany("ArticlesWeathers")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsGoOutside.Infrastructure.Data.Models.Weather", "Weather")
                        .WithMany("ArticlesWeathers")
                        .HasForeignKey("WeatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Author", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Event", b =>
                {
                    b.HasOne("LetsGoOutside.Infrastructure.Data.Models.Organizer", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Organizer", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Article", b =>
                {
                    b.Navigation("ArticlesCategories");

                    b.Navigation("ArticlesWeathers");
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Author", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("ArticlesCategories");
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Organizer", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("LetsGoOutside.Infrastructure.Data.Models.Weather", b =>
                {
                    b.Navigation("ArticlesWeathers");
                });
#pragma warning restore 612, 618
        }
    }
}
